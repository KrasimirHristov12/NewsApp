@using System.Security.Claims
@using NewsApp.Services.Comments
@model CommentsViewModel

@{
    var comments = Model.Comments.ToList();
}
<h3 id="commentsSection">Comments (<span class="comments-count">@Model.Comments.Count</span>):</h3>

<div class="comments">
    @foreach (var comment in comments.Where(c => c.OuterCommentId == null))
    {
        <div id="comment-@(comment.Id)" class="comment border border-2 mb-2">
            <span class="username fw-bold">@comment.UserUserName</span>
            <span class="createdOn fw-bold">- @comment.CreatedOn</span>
            <p class="content">@comment.Content</p>
            <div class="inner-comments">
                @foreach (var innerComment in comment.InnerComments)
                {
                    <div id="inner-comment-@(innerComment.Id)" class="inner-comment border border-2 mb-2 ms-2">
                        <span class="username fw-bold">@innerComment.UserUserName</span>
                        <span class="createdOn fw-bold">- @innerComment.CreatedOn</span>
                        <p class="content">@innerComment.Content</p>
                    </div>
                }
            </div>


            <button class="btn btn-primary reply-btn">Reply</button>

            <div class="comment-reply-form border border-2 p-3 d-none">
                <h5>Reply to a comment:</h5>
                <textarea class="comment-content" placeholder="Please be as detailed as possible" rows="4" cols="50"></textarea>
                <div class="submit-btn-container">
                    <button class="reply-submit-btn btn btn-primary">Submit</button>
                </div>

            </div>

            <div class="inner-comments" style="margin-left: 10px;">
                <vc:inner-comments outer-comment-id="@comment.Id" margin="20"></vc:inner-comments>
            </div>





        </div>
    }




</div>


<button class="add-comment btn btn-primary mb-2">Add a new comment</button>

<div class="comment-submit-form border border-2 p-3 d-none">
    <h5>Add a comment:</h5>
    <textarea class="comment-content" placeholder="Please be as detailed as possible" rows="4" cols="50"></textarea>
    <div class="submit-btn-container">
        <button class="submit-btn btn btn-primary">Submit</button>
    </div>

</div>

<div class="more-comments">
    <button type="button" class="btn btn-link">Show more...</button>
</div>

<form method="post" id="request-verification-token-form"></form>





<script type="text/javascript" on-content-loaded="true">

    $articleId = "@Model.ArticleId";
    $userId = "@Model.UserId";
    

    $("button.submit-btn").click(function () {
        postComment($(this).parent().prev(), $articleId);
    });

    $(document).on("click", "button.reply-submit-btn", function () {
        $commentReplyTextarea = $(this).parent().prev();
        $outerCommentId = $(this).closest(".comment").attr("id").match("\-(.*)$")[1];
        postComment($commentReplyTextarea, $articleId, $outerCommentId);
    });


    $("button.add-comment").click(function () {

        toggleCommentBox($(this));
    });

    $(document).on("click", "button.reply-btn", function () {
        // ADDED DUE TO THE NEED TO ATTACH EVENTS TO DYNAMICALLY CREATED BUTTONS.
        toggleCommentBox($(this));
    });

 

    $(".more-comments button").click(function () {
       
        getComments();
    })

    function toggleCommentBox(btnElement) {
        $addCommentBox = btnElement.next();

        if ($addCommentBox.hasClass("d-none")) {
            $addCommentBox.removeClass("d-none");
        }
        else {
            $addCommentBox.addClass("d-none");
        }
    }


    function postComment(textareaContentElement, articleId, outerCommentId = null) {

        $requestVerificationToken = $("#request-verification-token-form input[name=__RequestVerificationToken]").val();
        $textAreaCommentContent = textareaContentElement;
        $commentContent = $textAreaCommentContent.val();


        $.ajax({
            type: "POST",
            url: "/api/comments",
            data: JSON.stringify({ articleId: articleId, content: $commentContent, outerCommentId: outerCommentId }),
            headers: { "RequestVerificationToken": $requestVerificationToken },
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                tobeAddedArr = [];
                commentsInHtmlCount = $(".comment").length;
                allCount  = data.length;
                for (let i = commentsInHtmlCount; i < allCount; i++) {
                    tobeAddedArr.push(data[i]);
                }
                visualizeComments(tobeAddedArr);
                $textAreaCommentContent.val('');
            },
            error: function (errMsg) {
                alert(errMsg);
            }


        });

    }

    $initialComments = getData($articleId);

    function getComments() {

        $.get(`/api/comments?articleId=${$articleId}`, function (comments) {
            tobeAddedArr = [];
            commentsInHtmlCount = $(".comment").length;
            allCount = comments.length;
            for (let i = commentsInHtmlCount ; i < commentsInHtmlCount + 10; i++) {
                if (i == allCount) {
                    break;
                }
                tobeAddedArr.push(comments[i]);
            }
            visualizeComments(tobeAddedArr);
        });

    }



    function visualizeComments(comments) 
    {


        for (let i = 0; i < comments.length; i++) {

                let commentHtml = `
                             <div id="comment-${comments[i].id}" class="comment ${comments[i].outerCommentId != null ? 'inner-comment' : ''}">
                                    <span class="username fw-bold">${comments[i].userUserName}</span>
                                    <br />
                                    <span class="createdOn fw-bold">${comments[i].createdOn}</span>
                                    <p class="content">${comments[i].content}</p>
                                <button class="btn btn-primary reply-btn btn-sm">Reply</button>
                                <div class="comment-reply-form border border-2 p-3 d-none">
                                    <h5>Reply to a comment:</h5>
                                    <textarea class="comment-content" placeholder="Please be as detailed as possible" rows="4" cols="50"></textarea>
                                    <div class="submit-btn-container">
                                        <button class="reply-submit-btn btn btn-primary">Submit</button>
                                    </div>

                                </div>
                                <div class="inner-comments"></div>
                            </div>`
            if (comments[i].outerCommentId != null) {
                $(`#comment-${comments[i].outerCommentId} .inner-comments`).eq(0).append(commentHtml);
                console.log(parseInt($(`#comment-${comments[i].outerCommentId} .inner-comments`).eq(0).css('margin-left')));
                pixels = parseInt($(`#comment-${comments[i].outerCommentId} .inner-comments`).eq(0).css('margin-left').replace('px', ''));
                $(`#comment-${comments[i].id} .inner-comments`).eq(0).css('margin-left', (pixels * 2).toString() + 'px')
        for (let i = $initialComments.length; i < comments.length; i++) {
            if (comments[i].outerCommentId != null) {
                $innerCommentHtml =
                    `<div id="inner-comment-${comments[i].id}" class="inner-comment border border-2 mb-2 ms-2">
                            <span class="username fw-bold">${comments[i].userUserName}</span>
                         <span class="createdOn fw-bold">- ${comments[i].createdOn}</span>
                          <p class="content">${comments[i].content}</p>
                    </div>`;

                $(`#comment-${comments[i].outerCommentId}`).find(".inner-comments").append($innerCommentHtml);
            }
            else {
                $outerCommentHtml = 
                `<div id="comment-${comments[i].id}" class="comment border border-2 mb-2">
                    <span class="username fw-bold">${comments[i].userUserName}</span>
                    <span class="createdOn fw-bold">- ${comments[i].createdOn}</span>
                    <p class="content">${comments[i].content}</p>
                    <div class="inner-comments"></div>
                    <button class="btn btn-primary reply-btn">Reply</button>
                    <div class="comment-reply-form border border-2 p-3 d-none">
                    <h5>Reply to a comment:</h5>
                    <textarea class="comment-content" placeholder="Please be as detailed as possible" rows="4" cols="50"></textarea>
                    <div class="submit-btn-container">
                        <button class="reply-submit-btn btn btn-primary">Submit</button>
                    </div>
                </div>`;

                $(".comments").append($outerCommentHtml);

            }
            $(".comments-count").text(comments.length.toString());
        }

        $initialComments = comments;

    }

    function getData(articleId) {
        comments = [];

        $.ajax({
            type: "GET",
            url: `/api/comments?articleId=${articleId}`,
            dataType: "json",
            async: false,
            success: function (data) {
                comments = data;
            },
            error: function (errMsg) {
                alert(errMsg);
            }


        });
        return comments;
    }
        



</script>
